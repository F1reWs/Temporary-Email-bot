import logging
import json
import asyncio
import sqlite3
import time

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from config import API_TOKEN, admin
import keyboard as kb
from onesec_api import Mailbox
import os

class Form(StatesGroup):
    peremennaya = State()

storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)


connection = sqlite3.connect('data.db')
q = connection.cursor()

q.execute('CREATE TABLE IF NOT EXISTS users (user_id integer)')
connection.commit()

class sender(StatesGroup):
    text = State()


@dp.message_handler(content_types=['text'], text='‚úâÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ—á—Ç—É')
async def takeamail(m: types.Message):
    q.execute(f"SELECT * FROM users WHERE user_id = {m.chat.id}")
    result = q.fetchall()
    if len(result) == 0:
        uid = 'user_id'
        sql = 'INSERT INTO users ({}) VALUES ({})'.format(uid, m.chat.id)
        q.execute(sql)
        connection.commit()
    print(f"@{m.from_user.username} [{m.from_user.id}] {m.from_user.full_name}")    
    ma = Mailbox('')
    email = f'{ma._mailbox_}@1secmail.com'
    await m.answer(
        'üì´ –í–æ—Ç —Ç–≤–æ—è –ø–æ—á—Ç–∞: {}\n–û—Ç–ø—Ä–∞–≤–ª—è–π –ø–∏—Å—å–º–æ.\n'
        '–ü–æ—á—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –ø—Ä–∏–¥–µ—Ç –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ, –º—ã –≤–∞—Å –æ–± —ç—Ç–æ–º –æ–ø–æ–≤–µ—Å—Ç–∏–º!\n\n'
        '<b>–†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ—á—Ç—ã - 10 –º–∏–Ω—É—Ç!</b>'.format(email), parse_mode='HTML')
    timeout = 600
    timer = {}
    timeout_start = time.time()
    while time.time() < timeout_start + timeout:
        test = 0
        if test == 5:
            break
        test -= 1
        mb = ma.filtred_mail()
        if mb != 'not found':
            for i in mb:
                if i not in timer:
                    timer[i] = i
                    if isinstance(mb, list):
                        mf = ma.mailjobs('read', mb[0])
                        js = mf.json()
                        fromm = js['from']
                        theme = js['subject']
                        mes = js['textBody']
                        await m.answer(f'üì© –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ:\n<b>–û—Ç</b>: {fromm}\n<b>–¢–µ–º–∞</b>: {theme}\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ</b>: {mes}', reply_markup=kb.menu, parse_mode='HTML')
                        print(f'üì© –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ:\n<b>–û—Ç</b>: {fromm}\n<b>–¢–µ–º–∞</b>: {theme}\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ</b>: {mes}')
                        continue
        await asyncio.sleep(5)

@dp.message_handler(commands=['admin'])
async def adminstration(m: types.Message):
    if m.chat.id == admin:
        await m.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.', reply_markup=kb.apanel)


@dp.message_handler(commands=['start'])
async def texthandler(m: types.Message):
    q.execute(f"SELECT * FROM users WHERE user_id = {m.chat.id}")
    result = q.fetchall()
    if len(result) == 0:
        uid = 'user_id'
        sql = 'INSERT INTO users ({}) VALUES ({})'.format(uid, m.chat.id)
        q.execute(sql)
        connection.commit()
    await m.reply(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {m.from_user.mention}\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá', reply_markup=kb.menu)


@dp.callback_query_handler(text='stats')
async def statistics(call):
    row = q.execute('SELECT * FROM users').fetchall()
    lenght = len(row)
    await call.message.answer('–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}'.format(lenght))


@dp.callback_query_handler(text='rass')
async def usender(call):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá', reply_markup=kb.back)
    await sender.text.set()


@dp.message_handler(state=sender.text)
async def process_name(message: types.Message, state: FSMContext):
    info = q.execute('SELECT user_id FROM users').fetchall()
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=kb.menu)
        await state.finish()
    else:
        await message.answer('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...', reply_markup=kb.menu)
        for i in range(len(info)):
            try:
                await bot.send_message(info[i][0], str(message.text))
            except:
                pass
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
        await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)